Lambda Expressions:
WHY:
Functional Programming

WHAT:
Anonymous functons:Closures(method with no name)

Function -Method:

HOW:
public void display()
{
    sysout("hi");
}

1) Remove method name
public void ()
{
    sysout("hi");
}


2) Remove return datatype
public ()
{
    sysout("hi");
}

3) Remove Access Modifier
() 
{
    sysout("hi");
}
 
4) Add -> in between () and {}
()-> 
{
    sysout("hi");
}

Eg. 2:
public void add(int no1,int no2)
{
System.out.pritln("no1+no2");
}

(no1,no2)->
{
System.out.pritln("no1+no2");
}

# we have only one argument then
no1->
{
System.out.pritln("no1+no2");
}

# we have only one line then remove {}
no1->System.out.pritln("no1+no2");




Eg. 3:
public void add(int no1,int no2)
{
return no1+no2;
}

Functional Interfaces:
Compareable
Runnable

An interface with only one abstract method.Apart from this abstract method, we can have any number of default and static methods.

Functional Interface

default method,static methods:

Without Lamda:
interface Contract
{
public void rule1();
}


class Citizen implements Contract{
    public void rule1{
        sysout("hi");
    }
}

class ABCD{
    p s  v main(){
        Contract ci=new Citizen();//dynamic binding
        Citizen ci=new Citizen();//static binding
        ci.rule1();
    }
}

@FunctionalInterface - add anotations



inner classs:
Anonymous class






